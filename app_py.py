# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jaE9ml6yNDnBieIintKDidmkYKVlEskT
"""

import openai

import streamlit as st

openai.api_key = ''

import pickle

# Store only data
it_faq_data = {
    "password_reset": "Use the reset portal...",
    "network_issue": "Check cables or Wi-Fi...",
}

with open("it_service_chatbot.pkl", "wb") as f:
    pickle.dump(it_faq_data, f)

with open("it_service_chatbot.pkl", "rb") as f:
    faq = pickle.load(f)

import streamlit as st
import openai
import pickle
import os

# ----------------- Setup -----------------
st.set_page_config(page_title="IT Service Chatbot", layout="centered")
#client = OpenAI()

# Load FAQ data
FAQ_FILE = "it_faq.pkl"
if os.path.exists(FAQ_FILE):
    with open(FAQ_FILE, "rb") as file:
        it_faq_data = pickle.load(file)
else:
    it_faq_data = {}

# Initialize chat history
if "conversation" not in st.session_state:
    st.session_state.conversation = [
        {"role": "system", "content":
         "You are an IT Service chatbot. "
         "You assist employees with IT issues like password reset, network troubleshooting, "
         "software installation, and ticket status. "
         "Provide clear, step-by-step instructions."}
    ]

# ----------------- FAQ Matching -----------------
def get_faq_response(user_message):
    message = user_message.lower()
    if "password" in message and "reset" in message:
        return it_faq_data.get("password_reset", "")
    elif "network" in message or "internet" in message:
        return it_faq_data.get("network_issue", "")
    elif "software" in message and "install" in message:
        return it_faq_data.get("software_installation", "")
    elif "ticket" in message and "status" in message:
        return it_faq_data.get("ticket_status", "")
    elif "contact" in message and "it" in message:
        return it_faq_data.get("contact_it", "")
    return None

# ----------------- UI -----------------
st.title("ðŸ¤– IT Service Chatbot")
st.write("Ask me about password resets, network issues, software installations, or ticket status.")

# Chat display
for msg in st.session_state.conversation:
    if msg["role"] == "user":
        st.chat_message("user").write(msg["content"])
    elif msg["role"] == "assistant":
        st.chat_message("assistant").write(msg["content"])

# User input
user_input = st.chat_input("Type your message...")

if user_input:
    # Display user message
    st.chat_message("user").write(user_input)
    st.session_state.conversation.append({"role": "user", "content": user_input})

    # 1. Check FAQ
    faq_reply = get_faq_response(user_input)
    if faq_reply:
        bot_reply = faq_reply
    else:
        # 2. Use OpenAI
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=st.session_state.conversation,
            temperature=0.6,
            max_tokens=200
        )
        bot_reply = response.choices[0].message.content

    # Display bot message
    st.chat_message("assistant").write(bot_reply)
    st.session_state.conversation.append({"role": "assistant", "content": bot_reply})
